[{"content":"A few days ago, I switched to the Sway window manager after returning to GNU/Linux a few months ago. Before spending a few years in the macOS ecosystem, I was a long-time user of i3. For those unfamiliar, i3 and Sway perform the same function, but i3 is built for X.org while Sway is designed for Wayland. In this post, I’ll share my impressions, lessons learned, and the challenges I faced during this transition.\nThe Starting Point Currently, I’m using Ubuntu Linux version 24.04 (noble). Installing Sway was straightforward since it’s packaged for Ubuntu. A simple apt install sway, logging out of GNOME, and selecting Sway at the login screen were enough to get started. Having used i3 before, I wasn’t entirely lost.\nGlobal Keybindings (Media Keys, Power Button, etc.) As expected, some features didn’t work out-of-the-box as they do in GNOME. However, Sway’s configurability allowed me to tailor things to my liking. For instance:\nLocking the screen with a hotkey.\nPutting the laptop to standby when the power button is pressed.\nConfiguring volume and brightness keys.\nI dug up my seven-year-old i3 configuration for inspiration and adapted it to Sway. The resulting keybindings look like this:\nbindsym --locked XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle bindsym --locked XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5% bindsym --locked XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5% bindsym --locked XF86MonBrightnessUp exec sudo brightnessctl s \u0026#39;10%+\u0026#39; bindsym --locked XF86MonBrightnessDown exec sudo brightnessctl s \u0026#39;10%-\u0026#39; bindsym --locked XF86PowerOff exec systemctl suspend bindsym $mod+l exec swaylock -f -c 200020 --clock --indicator-idle-visible swayidle: Automatic Screen Locking To ensure the screen locks automatically after five minutes of inactivity, I installed swayidle, which is conveniently available on Ubuntu. However, I quickly missed having an indication of when the lock would occur. This was particularly annoying when I didn’t want the session to lock while still sitting at my desk. The solution? swaylock-effects. This tool offers additional features, such as --fade-in and --grace parameters, providing a visual cue and a grace period before locking.\nHere’s how it’s configured in my Sway setup:\nexec swayidle -w \\ timeout 300 \u0026#39;swaylock -f -c 200020 --clock --indicator-idle-visible --fade-in 3 --grace 3\u0026#39; \\ timeout 600 \u0026#39;swaymsg \u0026#34;output * power off\u0026#34;\u0026#39; resume \u0026#39;swaymsg \u0026#34;output * power on\u0026#34;\u0026#39; \\ before-sleep \u0026#39;swaylock -f -c 200020 --clock --indicator-idle-visible\u0026#39; Preventing Screen Lock During Video Playback By default, swayidle doesn’t detect when audio or video is playing. This meant my screen would lock during YouTube videos. The solution was SwayAudioIdleInhibit, a tool that’s not available in Ubuntu’s repositories. After cloning the repository and building it, I added the following line to my configuration:\nexec sway-audio-idle-inhibit Automatic Monitor Configuration Previously, I used autorandr with i3 for automatic monitor configuration. The Wayland equivalent is kanshi, which is also packaged for Ubuntu. After installation (apt install kanshi), I created a .config/kanshi/config file:\nprofile home { output \u0026#34;Samsung Electric Company U28E850 HTPK300903\u0026#34; mode 3840x2160 position 0,0 scale 2 output eDP-1 mode 1920x1080 position 1920,0 } profile laptop-only { output eDP-1 mode 1920x1080 position 0,0 } My external monitor runs at 4K with a scale of 2, while the laptop display doesn’t use scaling. To ensure everything starts automatically and to manage workspaces between monitors, I added these lines to my Sway config:\nbindsym $mod+w focus output HDMI-A-1 bindsym $mod+v focus output eDP-1 bindsym $mod+shift+w move workspace to output HDMI-A-1 bindsym $mod+shift+v move workspace to output eDP-1 exec kanshi Desktop Notifications Sway doesn’t include a built-in notification daemon. I chose mako, which also required building from source. Adding the following line to my configuration ensures it runs on startup:\nexec mako Final Thoughts Switching to Sway has been an exciting journey filled with challenges and opportunities to learn. While it lacks the \u0026ldquo;plug-and-play\u0026rdquo; experience of GNOME or macOS, its flexibility allows for a truly personalized setup. If you enjoy tinkering and configuring your environment to suit your needs, Sway is a fantastic choice.\n","permalink":"https://stesie.github.io/2025/01/switching-to-sway/","summary":"A few days ago, I switched to the Sway window manager after returning to GNU/Linux a few months ago. Before spending a few years in the macOS ecosystem, I was a long-time user of i3. For those unfamiliar, i3 and Sway perform the same function, but i3 is built for X.org while Sway is designed for Wayland. In this post, I’ll share my impressions, lessons learned, and the challenges I faced during this transition.","title":"Switching to Sway - My Journey Back to Linux"},{"content":"Lucky me, living in the metropolitan area of Nuremberg, \u0026hellip; this year I attended three different developer-oriented open spaces hosted within one hour driving range from home.\ndevops camp in Nuremberg, six iterations so far, first one back in March 2014 And starting this year there are now two developer-centric events (both more or less claiming to be the first one):\ndevelopercamp in Würzburg, back in September 2016\nswecamp in Tennenlohe/Erlangen, right yesterday \u0026amp; today\nAt the closing event of swecamp one participant mentioned that he was from Würzburg and also attended the developercamp\u0026hellip; and that swecamp was really cool yet not on par with developercamp. Unfortunately he wasn\u0026rsquo;t willing to elaborate on what caused his feeling, but it kindof struck me \u0026hellip; I couldn\u0026rsquo;t really answer the question which of those two camps was better (and remained quiet during the retrospective)\u0026hellip;\nBut it kept bothering me and I had some time to think on may way home, \u0026hellip; however I still cannot tell which one was \u0026ldquo;better\u0026rdquo;, mainly since it doesn\u0026rsquo;t feel right to compare the incomparible. After all both events attracted (slightly) different kinds of people. And as barcamps are largely shaped by their participators it\u0026rsquo;s due to this fact that both events felt different\u0026hellip;\ndevelopercamp was organized by Mayflower which is a project \u0026amp; consulting agency in PHP \u0026amp; JavaScript field, also doing some Agile consulting, etc. \u0026hellip; they mainly attracted (and this is personal gut feeling, not statistics) Webbish people, mostly developers but also a lot of product owners. Most attendees had an e-commerce background, be it a webshop, some shop software itself (Benjamin from Shopware was there) or some middleware provider. Topics were manifold, from What\u0026rsquo;s the job of a software architect? (which was interesting with half the audience from an Agile background and the other half from a more waterfallish one) over various Product Owner and discovery focussed stuff to dev-centric like Christopher\u0026rsquo;s TypeScript Game Engine Primer. Yet most sessions felt like fitting into my personal PHP/JavaScript/CleanCode filter bubble.\nOpposed to that swecamp was organized by methodpark which also does projects and consulting, yet in more enterprisy contexts: medical devices and automotive. They managed to attract people from a (perceived) broader range of backgrounds \u0026hellip; of course there were many of their own employees (Java, Embedded), more Java and C#, C++ and embedded devs from companies nearby \u0026hellip; and of course also some Webbies (like me). The session topics were a bit more focussed on the engineering part and theoretical (read: language agnostic and less hands-on-code oriented) and a bit more testing. There were no Product Owner things and interestingly no operations stuff (Puppet, Ansible et al) and IoT was more of a topic (unfortunately I completely missed the IoT hack space)\nWhat was especially cool with swecamp was that they had Susume Sasabe from Japan as a special guest, who did a comparison of DEV culture in Japan and Germany. He also spoke about Kaizen, different approaches to knowledge transfer, different problem solving methods etc. \u0026hellip; all in all enriching the whole event every here and there. Besides that I really enjoyed @NullPlusEins\u0026rsquo;s sessions on (developer) psychology.\nI also happily noticed that CQRS and Event Sourcing were a topic on both events, maybe a little bit more focussed on DDD at swecamp. This isn\u0026rsquo;t too surprising because of all the microservices buzz (which also was a hot topic on both events). Again serverless was not a topic, meh.\nLast but not least swecamp was hosted in methodpark\u0026rsquo;s office which was way cosier and more comfortable, more decorated than the university building in Würzburg (where developercamp took place).\nTo sum it up, both events have their unique points. I really enjoyed developercamp (as a Web developer) and also swecamp, both had some sessions that really resonated with me (and after all that\u0026rsquo;s the main reason for me to go to unconferences: learning about things I don\u0026rsquo;t know that I don\u0026rsquo;t know them). I\u0026rsquo;m so happy that I don\u0026rsquo;t have to pick a single event to go to next year. Both organizers already told that they\u0026rsquo;ll follow up with a second iteration (and I\u0026rsquo;m more then willing to go to both of them)\nPS: as a funny note, the devops camp site is the only one hosted with plain, unencrypted HTTP. Both more developer focussed events feature SSL :-)\nPPS: developercamp also hosts on IPv6 and their hosting also supports Forward Secrecy, so let\u0026rsquo;s consider it better. SCNR :-)\n","permalink":"https://stesie.github.io/2016/11/comparing-the-incomparible/","summary":"Lucky me, living in the metropolitan area of Nuremberg, \u0026hellip; this year I attended three different developer-oriented open spaces hosted within one hour driving range from home.\ndevops camp in Nuremberg, six iterations so far, first one back in March 2014 And starting this year there are now two developer-centric events (both more or less claiming to be the first one):\ndevelopercamp in Würzburg, back in September 2016\nswecamp in Tennenlohe/Erlangen, right yesterday \u0026amp; today","title":"comparing the incomparible -"},{"content":"As Ansbach (and the region around it) neither has a vibrant developer community nor a (regular) meetup to attract people to share their knowledge, mainly @niklas_heer and me felt like having to get active\u0026hellip;\nTherefore we came up with the idea to host a monthly meetup named /dev/night at @Tradebyte office (from August on regularly every 2nd Tuesday evening), give a short talk to provide food for thought and afterwards tackle a small challenge together.\n\u0026hellip; looking for some initial topics we noticed that patterns are definitely useful to stay on track and that there are many good ones beyond the good old GoF patterns. And as both of us are working for an eCommerce middleware provider we came to eCommerce patterns \u0026hellip; and finally decided to go with Transactional Patterns for the first meeting.\nSo yesterday @niklas_heer gave a small presentation on what ACID really means and why it is useful beyond database management system design (ever thought of implementing an automated teller machine? or maybe to stick with eCommerce what about fetching DHL labels from a web-service if you\u0026rsquo;re immediately charged for them? You definitely want to make sure that you don\u0026rsquo;t fetch them twice if two requests hit your system simultaneously). Besides he showed how to use two-phase commit to construct composite transactions from multiple, smaller ACID-compliant transactions and how this can aid (i.e. simplify) your system\u0026rsquo;s architecture.\nAs a challenge we thought of implementing a fictitious, distributed Club Mate vending machine, \u0026hellip; where you\u0026rsquo;ve got one central \u0026ldquo;controller\u0026rdquo; service that drives another (remote) service doing the cash handling (money collection and provide change as needed) as well as a Club Mate dispensing service (that of course also tracks its stock). Obviously it is the controller\u0026rsquo;s task to make sure that no Mate is dispensed if money collection fails, nor should the customer be charged if there\u0026rsquo;s not enough stock left.\n\u0026hellip; this story feels a bit constructed, but it fits the two-phase commit idea well and also suits the microservice bandwagon :-)\nLearnings the challenge we came up with was (again) too large \u0026ndash; quite like last Thursday when I was hosting the Pig Latin Kata in Nuremberg \u0026hellip; the team forming and getting the infrastructure working took way longer than expected (one team couldn\u0026rsquo;t even start to implement the transaction handling, as they got lost to details earlier on)\nafter all implementing a distributed system was funny, even so we couldn\u0026rsquo;t do a final test drive together (as not all of the services were feature complete)\n\u0026hellip; and it\u0026rsquo;s a refreshing difference to \u0026ldquo;just doing yet another kata\u0026rdquo;\nthe chosen topic Transactional Patterns turned out to be a good one, @sd_alt told us that he recently implemented some logic which would have benefitted from this pattern\none participant was new to test-driven development (hence his primary takeaway was how to do that with PHP and phpspec/codeception)\nthis also emphasises that we should address developers not familiar with TDD in our invitation (and should try not to scare them away by asking to bring laptops with an installed TDD-ready environment with them)\nfor visitors from Nuremberg 6:30 was too early, they ask to start at 7 o\u0026rsquo;clock\nall participants want us to carry on :-)\n\u0026hellip; so the next /dev/night/ is about to take place on September 13, 2016 at 7:10 p.m. The topic is going to be Command Query Responsibility Segregation pattern and Event Sourcing.\n","permalink":"https://stesie.github.io/2016/08/first-dev-night/","summary":"As Ansbach (and the region around it) neither has a vibrant developer community nor a (regular) meetup to attract people to share their knowledge, mainly @niklas_heer and me felt like having to get active\u0026hellip;\nTherefore we came up with the idea to host a monthly meetup named /dev/night at @Tradebyte office (from August on regularly every 2nd Tuesday evening), give a short talk to provide food for thought and afterwards tackle a small challenge together.","title":"Starting a local developer meetup"},{"content":"Yesterday I ran the Pig Latin kata at the local software craftsmenship meetup in Nuremberg. Picking Pig Latin as the kata to do was more a coincidence than planned, but it turned out to be an interesting choice.\nSo what I\u0026rsquo;ve prepared were four user stories (from which we only tackeled two; one team did three), going like this:\n(if you\u0026rsquo;d like to do the kata refrain from reading ahead and do one story after another)\nPig Latin is an English language game that alters each word of a phrase/sentence, individually.\nStory 1:\na phrase is made up of several words, all lowercase, split by a single space\nif the word starts with a vowel, the transformed word is simply the input + \u0026ldquo;ay\u0026rdquo; (e.g. \u0026ldquo;apple\u0026rdquo; -\u0026gt; \u0026ldquo;appleay\u0026rdquo;)\nin case the word begins with a consonant, the consonant is first moved to the end, then the \u0026ldquo;ay\u0026rdquo; is appended likewise (e.g. \u0026ldquo;bird\u0026rdquo; -\u0026gt; \u0026ldquo;irdbay\u0026rdquo;)\ntest case for a whole phrase (\u0026ldquo;a yellow bird\u0026rdquo; -\u0026gt; \u0026ldquo;aay ellowyay irdbay\u0026rdquo;)\nStory 2:\nhandle consonant clusters \u0026ldquo;ch\u0026rdquo;, \u0026ldquo;qu\u0026rdquo;, \u0026ldquo;th\u0026rdquo;, \u0026ldquo;thr\u0026rdquo;, \u0026ldquo;sch\u0026rdquo; and any consonant + \u0026ldquo;qu\u0026rdquo; at the word\u0026rsquo;s beginning like a single consonant (e.g. \u0026ldquo;chair\u0026rdquo; -\u0026gt; \u0026ldquo;airchay\u0026rdquo;, \u0026ldquo;square\u0026rdquo; -\u0026gt; \u0026ldquo;aresquay\u0026rdquo;, \u0026ldquo;thread\u0026rdquo; -\u0026gt; \u0026ldquo;eadthray\u0026rdquo;)\nhandle \u0026ldquo;xr\u0026rdquo; and \u0026ldquo;yt\u0026rdquo; at the word\u0026rsquo;s beginning like vowels (\u0026ldquo;xray\u0026rdquo; -\u0026gt; \u0026ldquo;xrayay\u0026rdquo;)\nStory 3:\nuppercase input should yield uppercase output (i.e. \u0026ldquo;APPLE\u0026rdquo; -\u0026gt; \u0026ldquo;APPLEAY\u0026rdquo;)\nalso titlecase input should be kept intact, the first letter should still be uppercase (i.e. \u0026ldquo;Bird\u0026rdquo; -\u0026gt; \u0026ldquo;Irdbay\u0026rdquo;)\nStory 4:\nhandle commas, dashes, fullstops, etc. well The End. Don\u0026rsquo;t read on if you\u0026rsquo;d like to do the kata yourself.\nFindings When I was running this kata at Softwerkskammer meetup we had eight participants, who interestingly formed three groups (mostly with three people each), instead of like four pairs. The chosen languages were Java, Java Script (ES6) and (thanks to Gabor) Haskell :-)\n\u0026hellip; the Haskell group unfortunately didn\u0026rsquo;t do test first development, but I think even if they would have they\u0026rsquo;d anyways have been the fastest team. Since the whole kata is about data transformation the functional aspects really pay off here. What I really found interesting regarding their implementation of story 3 was that they kept their transformation function for lowercase words unmodified (like I would have expected) but before that detected the word\u0026rsquo;s case and build a pair consisting of the lower case word plus a transformation function to restore the casing afterwards. When I did the kata on my own I kept the case in a variable and then used some conditionals (which I think is a bit less elegant) \u0026hellip;\nBesides that feedback was positive and we had a lot of fun doing the kata.\n\u0026hellip; and as a facilitator I underestimated how long it takes the pairs/teams to form, choose a test framework and get started. Actually I did the kata myself with a stopwatch, measuring how long each step would take as I was nervous that my four stories wouldn\u0026rsquo;t be enough :-) \u0026hellip; turns out we spent more time exercising and didn\u0026rsquo;t even finish all stories.\nFurther material: Pig Latin on exercism.io\nmy solution in Java 8\n","permalink":"https://stesie.github.io/2016/08/pig-latin-kata/","summary":"Yesterday I ran the Pig Latin kata at the local software craftsmenship meetup in Nuremberg. Picking Pig Latin as the kata to do was more a coincidence than planned, but it turned out to be an interesting choice.\nSo what I\u0026rsquo;ve prepared were four user stories (from which we only tackeled two; one team did three), going like this:\n(if you\u0026rsquo;d like to do the kata refrain from reading ahead and do one story after another)","title":"Pig Latin Kata"},{"content":"I\u0026rsquo;m currently very interested in serverless (aka no dedicated backend required) JavaScript Web Applications \u0026hellip; with AWS S3, Lambda \u0026amp; API Gateway you can actually get pretty far. Yet there is one thing I didn\u0026rsquo;t know how to do: Pub/Sub or \u0026ldquo;Realtime Messaging\u0026rdquo;.\nRealtime messaging allows to build web applications that can instantly receive messages published by another application (or the same one running in a different person\u0026rsquo;s browser). There even are cloud services permitting to do exactly this, e.g. Realtime Messaging Platform and PubNub Data Streams \u0026hellip;\nHowever recently having played with AWS Lambda and S3 I was wondering how this could be achieved on AWS\u0026hellip; and at first it seemed like it really isn\u0026rsquo;t possible. Especially the otherwise very interesting article Receiving AWS IoT messages in your browser using websockets by @jtparreira misled me, as he\u0026rsquo;s telling that it wouldn\u0026rsquo;t be possible. The article was published Nov 2015, \u0026hellip; not so long ago. But turns out it\u0026rsquo;s outdated anyways\u0026hellip;\nEnter AWS IoT While reading I stumbled over AWS IoT which allows to connect \u0026ldquo;Internet of Things\u0026rdquo; devices to the AWS cloud and furthermore provides messaging between those devices. It has a message broker (aka Device Gateway) sitting in the middle and \u0026ldquo;things\u0026rdquo; around it that connect to it. It\u0026rsquo;s based on the MQTT protocol and there are SDKs for the Raspberry Pi (Node.js), Android \u0026amp; iOS \u0026hellip; sound\u0026rsquo;s interesting, but not at all like \u0026ldquo;web browsers\u0026rdquo;\nMQTT over Web Sockets Then I found an announcement: AWS IoT Now Supports WebSockets published Jan 28, 2016. Brand new, but sounds great :)\n\u0026hellip; so even when IoT still sounds strange to do Pub/Sub with - it looks like a way to go.\nMaking it work For the proof of concept I didn\u0026rsquo;t care to publish AWS IAM User keys to the web application (of course this is a smell to be fixed before production use). So I went to \u0026ldquo;IAM\u0026rdquo; in the AWS management console and created a new user first, attaching the pre-defined AWSIoTDataAccess policy.\nSo the proof of concept should involve a simple web page that allows to establish a connection to the broker, features a text box where a message can be typed plus a publish button. So if two browsers are connected simultaneously then both should immediately receive messages published by one of them.\nrequired parts: \u0026hellip; we of course need a MQTT client and we need to do AWS-style request signing in the browser. NPM modules to the rescue:\naws-signature-v4 does the signature calculation\ncrypto helps it + some extra hashing we need to do\nmqtt has an MqttClient\n\u0026hellip; all of them have browser support through webpack. So we just need some more JavaScript to string everything together. To set up the connection:\nlet client = new MqttClient(() =\u0026gt; { const url = v4.createPresignedURL( \u0026#39;GET\u0026#39;, AWS_IOT_ENDPOINT_HOST.toLowerCase(), \u0026#39;/mqtt\u0026#39;, \u0026#39;iotdevicegateway\u0026#39;, crypto.createHash(\u0026#39;sha256\u0026#39;).update(\u0026#39;\u0026#39;, \u0026#39;utf8\u0026#39;).digest(\u0026#39;hex\u0026#39;), { \u0026#39;key\u0026#39;: AWS_ACCESS_KEY, \u0026#39;secret\u0026#39;: AWS_SECRET_ACCESS_KEY, \u0026#39;protocol\u0026#39;: \u0026#39;wss\u0026#39;, \u0026#39;expires\u0026#39;: 15 } ); return websocket(url, [ \u0026#39;mqttv3.1\u0026#39; ]); }); \u0026hellip; here createPresignedURL from aws-signature-v4 first does the heavy-lifting for us. We tell it the IoT endpoint address, protocol plus AWS credentials and it provides us with the signed URL to connect to.\nThere was just one stumbling block to me: I had upper-case letters in the hostname (as it is output by aws iot describe-endpoint command), the module however doesn\u0026rsquo;t convert these to lower case as expected by AWS\u0026rsquo; V4 signing process \u0026hellip; and as a matter of that access was denied first.\nHaving the signed URL we simply pass it on to a websocket-stream and create a new MqttClient instance around it.\nConnection established \u0026hellip; time to subscibe to a topic. Turns out to be simple:\nclient.on(\u0026#39;connect\u0026#39;, () =\u0026gt; client.subscribe(MQTT_TOPIC)); Handling incoming messages \u0026hellip; also easy:\nclient.on(\u0026#39;message\u0026#39;, (topic, message) =\u0026gt; console.log(message.toString())); \u0026hellip; and last not least publishing messages \u0026hellip; trivial again:\nclient.publish(MQTT_TOPIC, message); \u0026hellip; that\u0026rsquo;s it :-)\nMy proof of concept here\u0026rsquo;s what it looks like:\n\u0026hellip; the last incoming message was published from another browser running the exact same application.\nI\u0026rsquo;ve published my source code as a Gist on Github, feel free to re-use it.\nTo try it yourself:\nclone the Gist\nadjust the constants declared at the top of main.js as needed\ncreate a user in IAM first, see above\nfor the endpoint host run aws iot describe-endpoint CLI command\nrun npm install\nrun ./node_modules/.bin/webpack-dev-server --colors\nNext steps This was just the first (big) part. There\u0026rsquo;s more stuff left to be done:\nneither is hard-coding AWS credentials into the application source the way to go nor is publishing the secret key at all\n\u0026hellip; one possible approach would be to use the API Gateway + Lambda to create pre-signed URLs\n\u0026hellip; this could be further limited by using IAM roles and temporary identity federation (through STS Token Service)\nthere\u0026rsquo;s no user authentication yet, this should be achievable with AWS Cognito\n\u0026hellip; with that publishing/subscribing could be limitted to identity-related topics (depends on the use case)\n","permalink":"https://stesie.github.io/2016/04/aws-iot-pubsub/","summary":"I\u0026rsquo;m currently very interested in serverless (aka no dedicated backend required) JavaScript Web Applications \u0026hellip; with AWS S3, Lambda \u0026amp; API Gateway you can actually get pretty far. Yet there is one thing I didn\u0026rsquo;t know how to do: Pub/Sub or \u0026ldquo;Realtime Messaging\u0026rdquo;.\nRealtime messaging allows to build web applications that can instantly receive messages published by another application (or the same one running in a different person\u0026rsquo;s browser). There even are cloud services permitting to do exactly this, e.","title":"Serverless Pub Sub with AWS IoT"},{"content":"As I’ve recently been poked whether I had used phpspec and I had to negate, today I finally gave it a try (doing the Bowling Kata) \u0026hellip;\nphpspec has some class and method templating built into it. If for example a test fails due to a missing function, it asks whether it should create one (that does nothing at all). This is nice but IMHO breaks the workflow a bit as you have to move the cursor to the terminal window and answer the question. You don’t just Shift+F10, see “red” in the panel and then hit Alt+Enter in PhpStorm and choose to create the method (which is my way of working with phpunit).\nI like the well readable test code that can be written with it like\n$this-\u0026gt;getScore()-\u0026gt;shouldReturn(150) \u0026hellip; yet that code shows also what I hate about it. Since $this actually is the test-class, having to call the message to test on it feels strange (or even wrong) and also phpstorm has no support for that \u0026hellip; so no auto-completion here.\nCalling methods of the SUT directly on $this gets even more messy once you add test helper methods like\nfunction it_grants_spare_bonus() { $this-\u0026gt;rollSpare(); $this-\u0026gt;roll(5); $this-\u0026gt;rollMany(17, 0); $this-\u0026gt;getScore()-\u0026gt;shouldBe(20); } \u0026hellip; here only roll is a method of the SUT, rollSpare and rollMany are just helper methods.\nAfter all I\u0026rsquo;m still torn, I like the readability, but the rest still feels strange and I miss native support in PhpStorm.\n","permalink":"https://stesie.github.io/2016/03/thoughts-on-phpspec/","summary":"As I’ve recently been poked whether I had used phpspec and I had to negate, today I finally gave it a try (doing the Bowling Kata) \u0026hellip;\nphpspec has some class and method templating built into it. If for example a test fails due to a missing function, it asks whether it should create one (that does nothing at all). This is nice but IMHO breaks the workflow a bit as you have to move the cursor to the terminal window and answer the question.","title":"thoughts on phpspec"},{"content":"After @sD_Tobi recently poked me whether I knew phpspec, … and initially I had no idea except for having heard of it … I found this excellent screencast on laracasts.com to get a first impression. It\u0026rsquo;s just 17 minutes and he\u0026rsquo;s really enthusiastic about it :-)\n","permalink":"https://stesie.github.io/2016/03/hello-phpspec/","summary":"After @sD_Tobi recently poked me whether I knew phpspec, … and initially I had no idea except for having heard of it … I found this excellent screencast on laracasts.com to get a first impression. It\u0026rsquo;s just 17 minutes and he\u0026rsquo;s really enthusiastic about it :-)","title":"phpspec screencast"},{"content":"The other day I paired with the guys from @solutiondrive and @niklas_heer, we had a fun evening learing about happy numbers, shared PhpStorm knowledge, tried Codeception etc. Actually we didn\u0026rsquo;t even finish the \u0026ldquo;Happy Numbers\u0026rdquo; Kata, since we only wrote the classifying routine, not the loop generating the output.\nOn my way home I kept googling and also found out about Lucky Numbers. Lucky numbers are natural numbers, recursively filtered by a sieve that eliminates numbers based on their position (where the second number tells the elimination offsets).\nSo I immediately came up with another Kata: generating those numbers. My constraint: no upper limit, i.e. use PHP\u0026rsquo;s Generator instead \u0026hellip; so I came up with the idea to implement the sieve itself as a Generator, that reads from an injected Generator, filters as needed and yields the result. The first \u0026ldquo;sieve generator\u0026rdquo; is fed from another generator that simply yields all natural numbers. The second one is fed from the first one and so on. The generator into generator injection is handled by yet another generator \u0026hellip; turn\u0026rsquo;s out: it works, but doesn\u0026rsquo;t look so nice. The outer generator cannot simply inject generators endlessly (since they are actually instanciated), so injection has to be deferred - that however dilutes the self-contained sieve generator :-(\nAnyways it was a good exercise on PHP\u0026rsquo;s generators. I think I\u0026rsquo;ll give it another try soon, again with generators yet another approach.\n","permalink":"https://stesie.github.io/2016/03/happy-and-lucky-numbers/","summary":"The other day I paired with the guys from @solutiondrive and @niklas_heer, we had a fun evening learing about happy numbers, shared PhpStorm knowledge, tried Codeception etc. Actually we didn\u0026rsquo;t even finish the \u0026ldquo;Happy Numbers\u0026rdquo; Kata, since we only wrote the classifying routine, not the loop generating the output.\nOn my way home I kept googling and also found out about Lucky Numbers. Lucky numbers are natural numbers, recursively filtered by a sieve that eliminates numbers based on their position (where the second number tells the elimination offsets).","title":"Happy \u0026 Lucky Numbers"}]