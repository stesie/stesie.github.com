<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>~stesie's musings</title><link>https://stefansiegl.de/</link><description>Recent content on ~stesie's musings</description><generator>Hugo -- 0.123.7</generator><language>en-us</language><copyright>2025 Stefan Siegl · all content is CC-BY-SA · Terms of Service</copyright><lastBuildDate>Thu, 30 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://stefansiegl.de/feed.xml" rel="self" type="application/rss+xml"/><item><title>Audio Journaling</title><link>https://stefansiegl.de/2025/01/audio-journaling/</link><pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2025/01/audio-journaling/</guid><description>For quite some time now, I&amp;rsquo;ve been using Logseq as my personal knowledge management system. It has been an invaluable tool for organizing my thoughts, projects, and ideas. A few months ago, I decided to take it a step further by incorporating journaling into my daily routine. Each morning and evening, I reflect on how I&amp;rsquo;m feeling, what has moved me, what went well during the day, where I excelled, and where there might be room for improvement.</description></item><item><title>Claude writing a Telegram Bot, 2nd try</title><link>https://stefansiegl.de/2025/01/claude-writing-a-telegram-bot-2nd-try/</link><pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2025/01/claude-writing-a-telegram-bot-2nd-try/</guid><description>This is the second part of the mini series on writing Telegram bots to read my gas meter using Claude.
ℹ️ This post belongs to a mini series (I&amp;rsquo;m aiming for three posts in a row), where I try prompting Claude with different levels of verbosity and compare the results:
In Claude writing a Telegram Bot, 1st try I&amp;rsquo;m using an elaborate, step-by-step prompting strategy with Haiku model In Claude writing a Telegram Bot, 2nd try I was aiming for a (still pretty detailed) one-shot prompt Like in the first round, I will first show the full dialog I&amp;rsquo;ve used to let it generate the implementation.</description></item><item><title>Claude writing a Telegram Bot, 1st try</title><link>https://stefansiegl.de/2025/01/claude-writing-a-telegram-bot-1st-try/</link><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2025/01/claude-writing-a-telegram-bot-1st-try/</guid><description>Below you&amp;rsquo;ll find results of my initial try in using Claude to write a Telegram Bot.
ℹ️ This post belongs to a mini series (I&amp;rsquo;m aiming for three posts in a row), where I try prompting Claude with different levels of verbosity and compare the results:
In Claude writing a Telegram Bot, 1st try I&amp;rsquo;m using an elaborate, step-by-step prompting strategy with Haiku model In Claude writing a Telegram Bot, 2nd try I was aiming for a (still pretty detailed) one-shot prompt My ultimate goal is to figure out how much gas I need to heat my apartment.</description></item><item><title>Shift Left Testing mit automatischer Anforderungsabdeckung</title><link>https://stefansiegl.de/2025/01/shift-left-testing-mit-automatischer-anforderungsabdeckung/</link><pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2025/01/shift-left-testing-mit-automatischer-anforderungsabdeckung/</guid><description>Am 29. Juni war ich auf dem wunderbaren 6. SoCraTes Day Franken (große Empfehlung, falls es eine nächste Version geben wird). In der Session „Shift Left Testing“ von Felix Tensing beleuchtete er die Herausforderungen und seine Lösungsansätze im Bereich der Software-Anforderungsabdeckung. Hierbei stellte er sein Konzept vor, das speziell das Problem von inhaltlich veralteten oder unvollständigen Jira-Tickets adressiert.
Problemstellung Jira-Tickets oder ähnliche Systeme dienen dazu, Anforderungen und Aufgaben im Entwicklungsprozess festzuhalten.</description></item><item><title>Learning Out Loud</title><link>https://stefansiegl.de/2025/01/learning-out-loud/</link><pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2025/01/learning-out-loud/</guid><description>Lately, I&amp;rsquo;ve come across the concepts of &amp;ldquo;learning in public&amp;rdquo; and &amp;ldquo;digital gardens.&amp;rdquo; A digital garden is a unique approach to organizing and sharing knowledge in a non-linear and evolving manner. Think of it as a personal wiki where one can cultivate ideas, insights, and resources over time. Unlike traditional blogs or websites that present polished and finalized content, digital gardens focus on capturing the learning process itself, fostering exploration and serendipitous connections between different pieces of information.</description></item><item><title>Switching to Sway - My Journey Back to Linux</title><link>https://stefansiegl.de/2025/01/switching-to-sway/</link><pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2025/01/switching-to-sway/</guid><description>I recently switched from i3 to the Sway window manager on Ubuntu Linux 24.04, exploring its flexibility and learning to configure it for my needs. I customized keybindings, set up tools like swayidle and swaylock-effects for screen locking, and used kanshi for monitor management and mako for notifications. While it required more manual effort than GNOME or macOS, the result is a highly personalized and functional setup.</description></item><item><title>Rediscovering Programmer Dvorak</title><link>https://stefansiegl.de/2024/12/rediscovering-programmer-dvorak/</link><pubDate>Sat, 28 Dec 2024 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2024/12/rediscovering-programmer-dvorak/</guid><description>About 15 years ago, I stumbled upon the Programmer Dvorak keyboard layout, which completely changed how I thought about typing. This Christmas, I decided to see if my fingers still remembered the layout, and to my surprise, they did—better than my mind could! The experience reignited my love for customizing tools, and I even set up my current system to bring back the layout, blending nostalgia with practicality.</description></item><item><title>JUnit Parameter Resolvers</title><link>https://stefansiegl.de/2024/12/junit-parameter-resolvers/</link><pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2024/12/junit-parameter-resolvers/</guid><description>Today (err, recently) I learned &amp;hellip; that JUnit&amp;rsquo;s extension API allows for parameter resolvers. These kick in every time you use arguments on a test method, lifecycle method or class constructor. For me, so far, none of these methods ever took an argument. But turns out, it&amp;rsquo;s possible &amp;hellip; and even useful.
They have a primitive example here where they allow a test method to take a random number like so:</description></item><item><title>JUnit Assumptions API</title><link>https://stefansiegl.de/2024/08/junit-assumptions-api/</link><pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2024/08/junit-assumptions-api/</guid><description>Today, I discovered a powerful feature in JUnit: the Assumptions API. This API allows you to define assumptions for your tests. If an assumption isn&amp;rsquo;t met, the test execution is aborted rather than marked as failed. This distinction is crucial in scenarios like conditional test execution in CI pipelines. When a test is skipped due to an unmet assumption, it appears as &amp;ldquo;skipped&amp;rdquo; in the test reports, not as &amp;ldquo;passed&amp;rdquo; or &amp;ldquo;failed.</description></item><item><title>(rb)² – Road Bike Route Bot auf Mastodon</title><link>https://stefansiegl.de/2022/05/rb-road-bike-route-bot-auf-mastodon/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2022/05/rb-road-bike-route-bot-auf-mastodon/</guid><description>Ein Erfahrungsbericht, weil ich …
mal wieder was mit Geodaten machen wollte (und mich OpenStreetMap schon eine ganze Weile immer wieder umtreibt)
schon länger darüber nachdenke, wie gut es wohl funktioniert, einen zufälligen Fahrrad-Routenvorschlag nach eigenem Gusto zu erzeugen
schon länger im Fediverse (Mastodon) bin und während des Alle-Verlassen-Twitter-Hypes einen Bot zu bauen nahe liegt
Also los geht’s. How hard can it be?
Zunächst soll nicht unerwähnt bleiben, dass Dienste wie Strava erlauben, eine zufällige Route zu erzeugen; meinen Geschmack treffen die Ergebnisse jedoch eher selten.</description></item><item><title>comparing the incomparible -</title><link>https://stefansiegl.de/2016/11/comparing-the-incomparible/</link><pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/11/comparing-the-incomparible/</guid><description>Lucky me, living in the metropolitan area of Nuremberg, &amp;hellip; this year I attended three different developer-oriented open spaces hosted within one hour driving range from home.
devops camp in Nuremberg, six iterations so far, first one back in March 2014 And starting this year there are now two developer-centric events (both more or less claiming to be the first one):
developercamp in Würzburg, back in September 2016
swecamp in Tennenlohe/Erlangen, right yesterday &amp;amp; today</description></item><item><title>Starting a local developer meetup</title><link>https://stefansiegl.de/2016/08/first-dev-night/</link><pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/08/first-dev-night/</guid><description>As Ansbach (and the region around it) neither has a vibrant developer community nor a (regular) meetup to attract people to share their knowledge, mainly @niklas_heer and me felt like having to get active&amp;hellip;
Therefore we came up with the idea to host a monthly meetup named /dev/night at @Tradebyte office (from August on regularly every 2nd Tuesday evening), give a short talk to provide food for thought and afterwards tackle a small challenge together.</description></item><item><title>Pig Latin Kata</title><link>https://stefansiegl.de/2016/08/pig-latin-kata/</link><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/08/pig-latin-kata/</guid><description>Yesterday I ran the Pig Latin kata at the local software craftsmenship meetup in Nuremberg. Picking Pig Latin as the kata to do was more a coincidence than planned, but it turned out to be an interesting choice.
So what I&amp;rsquo;ve prepared were four user stories (from which we only tackeled two; one team did three), going like this:
(if you&amp;rsquo;d like to do the kata refrain from reading ahead and do one story after another)</description></item><item><title>Serverless Pub Sub with AWS IoT</title><link>https://stefansiegl.de/2016/04/aws-iot-pubsub/</link><pubDate>Sat, 02 Apr 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/04/aws-iot-pubsub/</guid><description>I&amp;rsquo;m currently very interested in serverless (aka no dedicated backend required) JavaScript Web Applications &amp;hellip; with AWS S3, Lambda &amp;amp; API Gateway you can actually get pretty far. Yet there is one thing I didn&amp;rsquo;t know how to do: Pub/Sub or &amp;ldquo;Realtime Messaging&amp;rdquo;.
Realtime messaging allows to build web applications that can instantly receive messages published by another application (or the same one running in a different person&amp;rsquo;s browser). There even are cloud services permitting to do exactly this, e.</description></item><item><title>Heroku custom platform repo for V8Js</title><link>https://stefansiegl.de/2016/03/heroku-custom-platform-repo/</link><pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/03/heroku-custom-platform-repo/</guid><description>Yesterday @dzuelke poked me to migrate the old PHP buildpack adjusted for V8Js to the new custom platform repo infrastructure. The advantage is that the custom platform repo only contains the v8js extension packages now, the rest (i.e. Apache and PHP itself) are pulled from the lang-php bucket, aka normal php buildpack.
As I already had that on my TODO list, I just immediately did that :-)
&amp;hellip; so here&amp;rsquo;s the new heroku-v8js Github repository that has all the build formulas.</description></item><item><title>V8Js improved fluent setter performance</title><link>https://stefansiegl.de/2016/03/fluent-setters/</link><pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/03/fluent-setters/</guid><description>After fixing V8Js&amp;rsquo; behaviour of not retaining the object identity of passed back V8Object instances (i.e. always re-wrapping them, instead of re-using the already existing object) I tried how V8Js handles fluent setters (those that return $this at the end).
Unfortunately they weren&amp;rsquo;t handled well, that is V8Js always wrapped the same object again and again (in both directions). Functionality-wise that doesn&amp;rsquo;t make a big difference since the underlying object is the same, hence further setters can still be called.</description></item><item><title>V8PromiseFactory</title><link>https://stefansiegl.de/2016/03/v8promisefactory/</link><pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/03/v8promisefactory/</guid><description>V8 has support for ES6 Promises and they make a clean JS-side API. So why not create promises from PHP, (later on) being resolved by PHP?
V8Js doesn&amp;rsquo;t allow direct creation of JS objects from PHP-code, a little JS-side helper needs to be used. One possibility is this:
class V8PromiseFactory { private $v8; public function __construct(V8Js $v8) { $this-&amp;gt;v8 = $v8; } public function __invoke($executor) { $trampoline = $this-&amp;gt;v8-&amp;gt;executeString( &amp;#39;(function(executor) { return new Promise(executor); })&amp;#39;); return $trampoline($executor); } } &amp;hellip; it can be used to construct an API method that returns a Promise like this:</description></item><item><title>thoughts on phpspec</title><link>https://stefansiegl.de/2016/03/thoughts-on-phpspec/</link><pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/03/thoughts-on-phpspec/</guid><description>As I’ve recently been poked whether I had used phpspec and I had to negate, today I finally gave it a try (doing the Bowling Kata) &amp;hellip;
phpspec has some class and method templating built into it. If for example a test fails due to a missing function, it asks whether it should create one (that does nothing at all). This is nice but IMHO breaks the workflow a bit as you have to move the cursor to the terminal window and answer the question.</description></item><item><title>phpspec screencast</title><link>https://stefansiegl.de/2016/03/hello-phpspec/</link><pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/03/hello-phpspec/</guid><description>After @sD_Tobi recently poked me whether I knew phpspec, … and initially I had no idea except for having heard of it … I found this excellent screencast on laracasts.com to get a first impression. It&amp;rsquo;s just 17 minutes and he&amp;rsquo;s really enthusiastic about it :-)</description></item><item><title>Happy &amp; Lucky Numbers</title><link>https://stefansiegl.de/2016/03/happy-and-lucky-numbers/</link><pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/03/happy-and-lucky-numbers/</guid><description>The other day I paired with the guys from @solutiondrive and @niklas_heer, we had a fun evening learing about happy numbers, shared PhpStorm knowledge, tried Codeception etc. Actually we didn&amp;rsquo;t even finish the &amp;ldquo;Happy Numbers&amp;rdquo; Kata, since we only wrote the classifying routine, not the loop generating the output.
On my way home I kept googling and also found out about Lucky Numbers. Lucky numbers are natural numbers, recursively filtered by a sieve that eliminates numbers based on their position (where the second number tells the elimination offsets).</description></item><item><title>funny Math.random behaviour</title><link>https://stefansiegl.de/2016/03/math-random-fun/</link><pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/03/math-random-fun/</guid><description>Playing around with V8&amp;rsquo;s custom startup snapshots I noticed some funny behaviour regarding Math.random.
It is clear that if you call Math.random() within the custom startup code the generated random numbers are baked into the snapshot and then not so random anymore. If you call Math.random() at runtime, without custom startup code, it just behaves as expected: it generates random numbers. However if you have custom startup code, calling Math.random() early on startup, it correctly generates random numbers during startup but it breaks runtime random number generation causing weird error messages like</description></item><item><title>20x performance boost with V8Js snapshots</title><link>https://stefansiegl.de/2016/02/snapshot-performance/</link><pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/02/snapshot-performance/</guid><description>Recently @virgofx filed an issue on V8Js whether (startup) performance of V8Js could be increased. He wants to do server-side React rendering and noticed that V8 itself needs roughly 50ms to initialize and then further 60ms to process React &amp;amp; ReactServer javascript code. Way too much for server side rendering (on more or less every request).
Up to V8 4.4 you simply could compile it with snapshots and V8Js made use of them.</description></item><item><title>V8Js approaching PHP7</title><link>https://stefansiegl.de/2015/10/v8js-on-php7/</link><pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2015/10/v8js-on-php7/</guid><description>For some weeks now I had the idea that V8Js must be running on PHP7 the day it is officially published. So when I started out porting soon after they published he first release candidate (aka 7.0.0RC1) I felt some pressure, especially after noticing that it really will be a lot of work to do.
The more glad I am to announce today, that V8Js finally compiles fine and passes the whole test suite from the master branch (apart from tiny modifications that became necessary due to PHP 5.</description></item></channel></rss>