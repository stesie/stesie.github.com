<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Cadiff on stesie's musings</title><link>https://stesie.github.io/tags/cadiff/</link><description>Recent content in Cadiff on stesie's musings</description><generator>Hugo -- 0.123.7</generator><language>en-us</language><copyright>2025 Stefan Siegl · all content is CC-BY-SA · Terms of Service</copyright><lastBuildDate>Wed, 11 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://stesie.github.io/tags/cadiff/feed.xml" rel="self" type="application/rss+xml"/><item><title>JUnit Parameter Resolvers</title><link>https://stesie.github.io/2024/12/junit-parameter-resolvers/</link><pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate><guid>https://stesie.github.io/2024/12/junit-parameter-resolvers/</guid><description>Today (err, recently) I learned &amp;hellip; that JUnit&amp;rsquo;s extension API allows for parameter resolvers. These kick in every time you use arguments on a test method, lifecycle method or class constructor. For me, so far, none of these methods ever took an argument. But turns out, it&amp;rsquo;s possible &amp;hellip; and even useful.
They have a primitive example here where they allow a test method to take a random number like so:</description></item></channel></rss>