<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Dependency Inversion on ~stesie's musings</title><link>https://stefansiegl.de/tags/dependency-inversion/</link><description>Recent content in Dependency Inversion on ~stesie's musings</description><generator>Hugo -- 0.123.7</generator><language>en-us</language><copyright>2025 Stefan Siegl · all content is CC-BY-SA · Terms of Service</copyright><lastBuildDate>Thu, 19 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://stefansiegl.de/tags/dependency-inversion/feed.xml" rel="self" type="application/rss+xml"/><item><title>Dependency Inversion for Camunda Tasks</title><link>https://stefansiegl.de/2025/06/dependency-inversion-for-camunda-tasks/</link><pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2025/06/dependency-inversion-for-camunda-tasks/</guid><description>In Camunda Service Tasks can be implemented using so-called delegate expressions, which, in the context of CDI, resolve to @Named annotated beans.
This task class has to implement the JavaDelegate interface, which mandates a method named execute, which receives a single argument with a DelegateExecution instance. However there is the Dependency Inversion Principle (DIP), and this way our business code directly depends on two classes from Camunda. Can&amp;rsquo;t we do better?</description></item></channel></rss>