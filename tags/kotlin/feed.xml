<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kotlin on ~stesie's musings</title><link>https://stefansiegl.de/tags/kotlin/</link><description>Recent content in Kotlin on ~stesie's musings</description><generator>Hugo -- 0.123.7</generator><language>en-us</language><copyright>2025 Stefan Siegl · all content is CC-BY-SA · Terms of Service</copyright><lastBuildDate>Sun, 30 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://stefansiegl.de/tags/kotlin/feed.xml" rel="self" type="application/rss+xml"/><item><title>Building WueRide - Experimenting with LLM-Powered Coding and the Fediverse</title><link>https://stefansiegl.de/2025/03/building-wueride-experimenting-with-llm-powered-coding-and-the-fediverse/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2025/03/building-wueride-experimenting-with-llm-powered-coding-and-the-fediverse/</guid><description>A few weeks ago, I came across Harper Reed’s blog post, My LLM codegen workflow atm, which made the rounds in the developer community. While his approach to using an LLM to collect and refine requirements was interesting, what really caught my attention was his mention of Aider.
What is Aider? Simply put, Aider is a CLI tool that isn’t tied to a specific LLM. It takes a prompt, sends it to a language model, requests code in a diff-based format, and applies those changes automatically to your project.</description></item></channel></rss>