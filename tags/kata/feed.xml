<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kata on ~stesie's musings</title><link>https://stefansiegl.de/tags/kata/</link><description>Recent content in Kata on ~stesie's musings</description><generator>Hugo -- 0.123.7</generator><language>en-us</language><copyright>2025 Stefan Siegl · all content is CC-BY-SA · Terms of Service</copyright><lastBuildDate>Tue, 04 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://stefansiegl.de/tags/kata/feed.xml" rel="self" type="application/rss+xml"/><item><title>Pig Latin Kata</title><link>https://stefansiegl.de/2016/08/pig-latin-kata/</link><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/08/pig-latin-kata/</guid><description>Yesterday I ran the Pig Latin kata at the local software craftsmenship meetup in Nuremberg. Picking Pig Latin as the kata to do was more a coincidence than planned, but it turned out to be an interesting choice.
So what I&amp;rsquo;ve prepared were four user stories (from which we only tackeled two; one team did three), going like this:
(if you&amp;rsquo;d like to do the kata refrain from reading ahead and do one story after another)</description></item><item><title>Happy &amp; Lucky Numbers</title><link>https://stefansiegl.de/2016/03/happy-and-lucky-numbers/</link><pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate><guid>https://stefansiegl.de/2016/03/happy-and-lucky-numbers/</guid><description>The other day I paired with the guys from @solutiondrive and @niklas_heer, we had a fun evening learing about happy numbers, shared PhpStorm knowledge, tried Codeception etc. Actually we didn&amp;rsquo;t even finish the &amp;ldquo;Happy Numbers&amp;rdquo; Kata, since we only wrote the classifying routine, not the loop generating the output.
On my way home I kept googling and also found out about Lucky Numbers. Lucky numbers are natural numbers, recursively filtered by a sieve that eliminates numbers based on their position (where the second number tells the elimination offsets).</description></item></channel></rss>