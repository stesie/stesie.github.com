<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>V8 Heap Snapshots on stesie's musings</title><link>https://stesie.github.io/tags/v8-heap-snapshots/</link><description>Recent content in V8 Heap Snapshots on stesie's musings</description><generator>Hugo -- 0.123.7</generator><language>en-us</language><lastBuildDate>Fri, 03 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://stesie.github.io/tags/v8-heap-snapshots/feed.xml" rel="self" type="application/rss+xml"/><item><title>funny Math.random behaviour</title><link>https://stesie.github.io/2016/03/math-random-fun/</link><pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate><guid>https://stesie.github.io/2016/03/math-random-fun/</guid><description>Playing around with V8&amp;rsquo;s custom startup snapshots I noticed some funny behaviour regarding Math.random.
It is clear that if you call Math.random() within the custom startup code the generated random numbers are baked into the snapshot and then not so random anymore. If you call Math.random() at runtime, without custom startup code, it just behaves as expected: it generates random numbers. However if you have custom startup code, calling Math.random() early on startup, it correctly generates random numbers during startup but it breaks runtime random number generation causing weird error messages like</description></item><item><title>20x performance boost with V8Js snapshots</title><link>https://stesie.github.io/2016/02/snapshot-performance/</link><pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate><guid>https://stesie.github.io/2016/02/snapshot-performance/</guid><description>Recently @virgofx filed an issue on V8Js whether (startup) performance of V8Js could be increased. He wants to do server-side React rendering and noticed that V8 itself needs roughly 50ms to initialize and then further 60ms to process React &amp;amp; ReactServer javascript code. Way too much for server side rendering (on more or less every request).
Up to V8 4.4 you simply could compile it with snapshots and V8Js made use of them.</description></item></channel></rss>