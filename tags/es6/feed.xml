<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ES6 on stesie's musings</title><link>https://stesie.github.io/tags/es6/</link><description>Recent content in ES6 on stesie's musings</description><generator>Hugo -- 0.123.7</generator><language>en-us</language><copyright>2025 Stefan Siegl Â· all content is CC-BY-SA</copyright><lastBuildDate>Fri, 03 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://stesie.github.io/tags/es6/feed.xml" rel="self" type="application/rss+xml"/><item><title>V8PromiseFactory</title><link>https://stesie.github.io/2016/03/v8promisefactory/</link><pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate><guid>https://stesie.github.io/2016/03/v8promisefactory/</guid><description>V8 has support for ES6 Promises and they make a clean JS-side API. So why not create promises from PHP, (later on) being resolved by PHP?
V8Js doesn&amp;rsquo;t allow direct creation of JS objects from PHP-code, a little JS-side helper needs to be used. One possibility is this:
class V8PromiseFactory { private $v8; public function __construct(V8Js $v8) { $this-&amp;gt;v8 = $v8; } public function __invoke($executor) { $trampoline = $this-&amp;gt;v8-&amp;gt;executeString( &amp;#39;(function(executor) { return new Promise(executor); })&amp;#39;); return $trampoline($executor); } } &amp;hellip; it can be used to construct an API method that returns a Promise like this:</description></item></channel></rss>