<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Performance on stesie's musings</title><link>https://stesie.github.io/tags/performance/</link><description>Recent content in Performance on stesie's musings</description><generator>Hugo -- 0.123.7</generator><language>en-us</language><copyright>2025 Stefan Siegl · all content is CC-BY-SA</copyright><lastBuildDate>Fri, 03 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://stesie.github.io/tags/performance/feed.xml" rel="self" type="application/rss+xml"/><item><title>V8Js improved fluent setter performance</title><link>https://stesie.github.io/2016/03/fluent-setters/</link><pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate><guid>https://stesie.github.io/2016/03/fluent-setters/</guid><description>After fixing V8Js&amp;rsquo; behaviour of not retaining the object identity of passed back V8Object instances (i.e. always re-wrapping them, instead of re-using the already existing object) I tried how V8Js handles fluent setters (those that return $this at the end).
Unfortunately they weren&amp;rsquo;t handled well, that is V8Js always wrapped the same object again and again (in both directions). Functionality-wise that doesn&amp;rsquo;t make a big difference since the underlying object is the same, hence further setters can still be called.</description></item><item><title>20x performance boost with V8Js snapshots</title><link>https://stesie.github.io/2016/02/snapshot-performance/</link><pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate><guid>https://stesie.github.io/2016/02/snapshot-performance/</guid><description>Recently @virgofx filed an issue on V8Js whether (startup) performance of V8Js could be increased. He wants to do server-side React rendering and noticed that V8 itself needs roughly 50ms to initialize and then further 60ms to process React &amp;amp; ReactServer javascript code. Way too much for server side rendering (on more or less every request).
Up to V8 4.4 you simply could compile it with snapshots and V8Js made use of them.</description></item><item><title>Two more V8Js releases</title><link>https://stesie.github.io/2015/09/two-more-releases/</link><pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate><guid>https://stesie.github.io/2015/09/two-more-releases/</guid><description>Today as well as last Thursday I uploaded two more V8Js releases to PECL, both fixing issues around v8::FunctionTemplate usage that bit me at work.
Those v8::FunctionTemplate objects are used to construct constructor functions (and thus object templates) in V8. The problem with them? They are not object to garbage collection. So if we export a object with a method attached to it from PHP to JS, V8Js at first exports the object (and caches the v8::FunctionTemplate used to construct it; re-using it on subsequent export of the same class).</description></item><item><title>Poor V8Function call performance</title><link>https://stesie.github.io/2015/08/poor-v8js-function-call-performance/</link><pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate><guid>https://stesie.github.io/2015/08/poor-v8js-function-call-performance/</guid><description>Today I noticed, that invocations of V8Function objects have a really poor call performance. A simple example might be:
$v8 = new V8Js(); $func = $v8-&amp;gt;executeString(&amp;#39;(function() { print(&amp;#34;Hello\\n&amp;#34;); });&amp;#39;); for($i = 0; $i &amp;lt; 1000; $i ++) { $func(); } &amp;hellip; on my laptop this takes 2.466 seconds (with latest V8Js 0.2.1); older versions like V8Js 0.1.5 even take 80 seconds.
That felt strange, since V8Js performance generally is pretty good and the slightly changed version</description></item></channel></rss>