<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Fluent Setters on stesie's musings</title><link>https://stesie.github.io/tags/fluent-setters/</link><description>Recent content in Fluent Setters on stesie's musings</description><generator>Hugo -- 0.123.7</generator><language>en-us</language><copyright>2025 Stefan Siegl · all content is CC-BY-SA</copyright><lastBuildDate>Fri, 03 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://stesie.github.io/tags/fluent-setters/feed.xml" rel="self" type="application/rss+xml"/><item><title>V8Js improved fluent setter performance</title><link>https://stesie.github.io/2016/03/fluent-setters/</link><pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate><guid>https://stesie.github.io/2016/03/fluent-setters/</guid><description>After fixing V8Js&amp;rsquo; behaviour of not retaining the object identity of passed back V8Object instances (i.e. always re-wrapping them, instead of re-using the already existing object) I tried how V8Js handles fluent setters (those that return $this at the end).
Unfortunately they weren&amp;rsquo;t handled well, that is V8Js always wrapped the same object again and again (in both directions). Functionality-wise that doesn&amp;rsquo;t make a big difference since the underlying object is the same, hence further setters can still be called.</description></item></channel></rss>